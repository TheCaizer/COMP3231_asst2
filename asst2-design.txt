The design we were going for was to create a OpenFileTable struct which contains 
the information of the file as show below:
struct{
    int Flag; // The flag for the opened file
    struct vnode* vnodeptr; // Pointer to the vnode
    off_t Offset; // Number of bytes offset for the opened file 
    int ReferenceCounter; // Number of reference for this file
} OpenFileTable;
Then we would have a global vairable called global_oft which is shared between all
the processes. global_oft is a pointers that point to one of these struct
for each file.
struct OpenFileTable *global_oft;
The per-process file descriptor table is an int array that returns the value which corresponds to the index of global_oft.
int FileDescriptorTable[OPEN_MAX];
Which is inside the proc struct in proc.h so that it in every process as shown in the lecture slides.
We have file descriptors in each process in proc.h whose index is the file descriptors.

HOW TO IMPLEMENT THE FUNCTIONS:
open();
We check the filename is valid and if it is invoke vfs_open();

close();
To close a file we have to check if fd is valid and there is a valid number in the global_oft corresponding to the fd, 
we decrement the reference counter and then unassigned the fd. 
If ReferenceCounter goes to 0 we can close the file if greater than 0 we don't. We retun 0 on success.
retval is -1 for error and 0 for success.

read(;
We check the fd is valid and the flag is read or rw. Use uio_kinit to get an uio and pass
into VOP_READ(vnode, uio).

write();
Similar to read we need to check if the fd is valid and then check the flag is write or rw.
Then we use uio_kinit to get an uio then pass it into VOP_WRITE(vnode, uio).

lseek();
We check if the fd is valid, then if it is update the vnode pointer in the fd to 
the offset input either relative to the start, end or current position in the file
depending on the value of whence.

dup2();
We check if fd is a valid one then we check if the newFD is a opened file or not
if it is then we can close the old file and then point to the new file. If it is 
not then we can open the file and then close old and point to new. If new and 
old are the same then we do nothing.